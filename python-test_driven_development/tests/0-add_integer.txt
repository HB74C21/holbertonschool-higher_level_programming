>>> add_integer = __import__('0-add_integer').add_integer

This test checks if the function correctly adds two integers.
>>> print(add_integer(1, 2))
3

This test checks if the function correctly adds a float and an integer.
>>> print(add_integer(100.3, -2))
98

This test checks if the function correctly handles a non-numeric input for the first parameter.
>>> print(add_integer("@", 2))
Traceback (most recent call last):
TypeError: a must be an integer

This test checks if the function correctly handles a non-numeric input for the second parameter
>>> print(add_integer(4, "School"))
Traceback (most recent call last):
TypeError: b must be an integer

This test checks if the function correctly handles missing input parameters.
>>> print(add_integer(  ))
Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'

This test checks if the function correctly handles excess input parameters.
>>> print(add_integer(100.3, -2, 4))
Traceback (most recent call last):
TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

This test checks if the function correctly handles a string that cannot be converted to a float.
>>> print(add_integer(float("a"), 2))
Traceback (most recent call last):
ValueError: could not convert string to float: 'a'

This test checks if the function correctly handles a string that cannot be converted to an integer.
>>> print(add_integer(int("a"), 2))
Traceback (most recent call last):
ValueError: invalid literal for int() with base 10: 'a'
